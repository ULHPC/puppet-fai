#! /bin/bash
################################################################################
# update_fai -  update the local FAI configuration
# Creation : 02 Feb 2010
# Time-stamp: <Thu 2011-03-31 00:34 svarrette>
#
# Copyright (c) 2010 Sebastien Varrette <Sebastien.Varrette@uni.lu>
#               http://varrette.gforge.uni.lu
# $Id: update_fai 430 2013-05-28 17:00:19Z hcartiaux $
#
# Description : see the print_help function or launch 'update_fai --help'
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
################################################################################

### Global variables
VERSION=0.2
COMMAND=`basename $0`
VERBOSE=""
DEBUG=""
SIMULATION=""
FORCE=""
RSYNC_MODE="--update"

### displayed colors
COLOR_GREEN="\033[0;32m"
COLOR_RED="\033[0;31m"
COLOR_YELLOW="\033[0;33m"
COLOR_VIOLET="\033[0;35m"
COLOR_CYAN="\033[0;36m"
COLOR_BOLD="\033[1m"
COLOR_BACK="\033[0m"

SITE=chaos.lu

if [ "$COMMAND" != "update_fai" ]; then
    # by convention, name should be prefixed by sitename_update_fai
    # so retrieve sitename
    SITE=`echo $COMMAND | cut -d '_' -f 1`
fi

echo " ---- configure FAI and serveur config on the site $SITE ---"

### Local variables
FAI_FILE_OWNER=root                        # file owner
FAI_FILE_GROUP=faiadmin                    # file group
FAI_SVN=/root/svn/ulclusters               # local working copy of the repository

FAI_CONFIGDIR=/srv/fai/config              # FAI config dir
FAI_ETC=/etc/fai                           # FAI etc files
BIND_CONFDIR=/etc/bind                     # DNS server (aka bind) configuration
LDAP_CONFDIR=/etc/ldap                     # LDAP etc files
GANGLIA_CONFDIR=/etc/ganglia               # Ganglia Monitoring System



SVN_FAI_CONFIGDIR=${FAI_SVN}/FAI/config
SVN_FAI_ETC=${FAI_SVN}/sites/${SITE}/fai
SVN_BIND_CONFDIR=${FAI_SVN}/sites/${SITE}/bind
SVN_GANGLIA_CONFDIR=${FAI_SVN}/sites/${SITE}/ganglia
SVN_LDAP_CONFDIR=${FAI_SVN}/sites/${SITE}/ldap

#case $SITE in
#   gaia-cluster)
#    dst_array=(${FAI_CONFIGDIR}     ${FAI_ETC}     );
#    src_array=(${SVN_FAI_CONFIGDIR} ${SVN_FAI_ETC} );;
#   *)
#    dst_array=(${FAI_CONFIGDIR}     ${FAI_ETC}     ${BIND_CONFDIR}     ${LDAP_CONFDIR}    );
#    src_array=(${SVN_FAI_CONFIGDIR} ${SVN_FAI_ETC} ${SVN_BIND_CONFDIR} ${SVN_LDAP_CONFDIR});;
#esac
case $SITE in
   *)
    dst_array=(${FAI_CONFIGDIR}      );
    src_array=(${SVN_FAI_CONFIGDIR}  );;
esac


#######################
### print functions ###
#######################

####
# print version of this program
##
print_version() {
    cat <<EOF
This is $COMMAND version "$VERSION".
Copyright (c) 2010 Sebastien Varrette  (http://varrette.gforge.uni.lu)
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
EOF
}

####
# print help
##
print_help() {
    cat <<EOF
NAME
        $COMMAND -- synchronize the local FAI confoguration (mainly /etc/fai and
        /srv/fai/config) from the latest working copy of the svn repository.

SYNOPSIS
        $COMMAND [-V | -h]
        $COMMAND [--debug] [-v] [-n]

DESCRIPTION
        $COMMAND

OPTIONS
        --debug
                Debug mode. Causes $COMMAND to print debugging messages.
        --force
                Don't ask for confirmation
        --delete
                rsync with --delete optiuon (exact sync)
        -h --help
                Display a help screen and quit.
        -n --dry-run
                Simulation mode.
        -v --verbose
                Verbose mode.
        -V --version
                Display the version number then quit.

AUTHOR
        Sebastien Varrette <Sebastien.Varrette@uni.lu>
        Web page: http://varrette.gforge.uni.lu

REPORTING BUGS
        Please report bugs to <Sebastien.Varrette@uni.lu>

COPYRIGHT
        This is free software; see the source for copying conditions.  There is
        NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR
        PURPOSE.

SEE ALSO
        Other scripts are available on my web site http://varrette.gforge.uni.lu
EOF
}

######
# Print information in the following form: '[$2] $1' ($2=INFO if not submitted)
# usage: info text [title]
##
info() {
    [ -z "$1" ] && print_error_and_exit "[$FUNCNAME] missing text argument"
    local text=$1
    local title=$2
    # add default title if not submitted but don't print anything
    [ -n "$text" ] && text="${title:==>} $text"
    echo -e $text
}
debug()   { [ -n "$DEBUG"   ] && info "$1" "[${COLOR_YELLOW}DEBUG${COLOR_BACK}]"; }
verbose() { [ -n "$VERBOSE" ] && info "$1"; }
error()   { info "$1" "[${COLOR_RED}ERROR${COLOR_BACK}]"; }
warning() { info "$1" "[${COLOR_VIOLET}WARNING${COLOR_BACK}]"; }
print_error_and_exit() {
    local text=$1
    [ -z "$1" ] && text=" Bad format"
    error  "$text. '$COMMAND -h' for help."
    exit 1
}
#####
# print the strings [ OK ] or [ FAILED ] or [ FAILED ]\n$1
##
print_ok()     { echo -e "[   ${COLOR_GREEN}OK${COLOR_BACK}   ]"; }
print_failed() { echo -e "[ ${COLOR_RED}FAILED${COLOR_BACK} ]"; }
print_failed_and_exit() {
    print_failed
    [ ! -z "$1" ] && echo "$1"
    exit 1
}

#########################
### toolbox functions ###
#########################

#####
# execute a local command
# usage: execute command
###
execute() {
    [ $# -eq 0 ] && print_error_and_exit "[$FUNCNAME] missing command argument"
    debug "[$FUNCNAME] $*"
    [ -n "${SIMULATION}" ] && echo "(simulation) $*" || eval $*
    local exit_status=$?
    debug "[$FUNCNAME] exit status: $exit_status"
    return $exit_status
}

####
# ask to continue. exit 1 if the answer is no
# usage: really_continue text
##
really_continue() {
    if [ -z "${FORCE}" ]; then
        echo -e -n "[${COLOR_VIOLET}WARNING${COLOR_BACK}] $1 Are you sure you want to continue? [Y|n] "
        read ans
        case $ans in
            n*|N*) exit 1;;
        esac
    fi
}

#####
# Check availability of binaries passed as arguments on the current system
# usage: check_bin prog1 prog2 ...
##
check_bin() {
    [ $# -eq 0 ] && print_error_and_exit "[$FUNCNAME] missing argument"
    for appl in $*; do
        echo -n -e "=> checking availability of the command '$appl' on your system \t"
        local tmp=`which $appl`
        [ -z "$tmp" ] && print_failed_and_exit "Please install $appl or check \$PATH." || print_ok
    done
}

print_local_variables() {
    echo "FAI_FILE_OWNER = ${FAI_FILE_OWNER}"
    echo "FAI_FILE_GROUP = ${FAI_FILE_GROUP}"
    echo "FAI_SVN        = ${FAI_SVN}"
    echo "FAI_CONFIGDIR  = ${FAI_CONFIGDIR}"
    echo "FAI_ETC        = ${FAI_ETC}"
    echo "SVN_FAI_CONFIGDIR = ${SVN_FAI_CONFIGDIR}"
    echo "SVN_FAI_ETC    = ${SVN_FAI_ETC}"
    echo "LDAP_CONFDIR   = ${LDAP_CONFDIR}"
    echo "SVN_LDAP_CONFDIR = ${SVN_LDAP_CONFDIR}"
}


################################################################################
################################################################################
#[ $UID -gt 0 ] && print_error_and_exit "You must be root to execute this script (current uid: $UID)"

# Check for required argument
#[ $# -eq 0 ] && print_error_and_exit

# Check for options
while [ $# -ge 1 ]; do
    case $1 in
        -h | --help)    print_help;        exit 0;;
        -V | --version) print_version;     exit 0;;
        --debug)
            print_local_variables;
            DEBUG="--debug";
            VERBOSE="--verbose";;
        --force)         FORCE="--force";;
        -d | --delete)   RSYNC_MODE="--delete";;
        -u | --update)   RSYNC_MODE="--update";;
        -v | --verbose)  VERBOSE="--verbose";;
        -n | --dry-run)  SIMULATION="--dry-run";;
    esac
    shift
done


info "update local copy of the SVN repository (in ${FAI_SVN})"
execute "pushd ${FAI_SVN}"
execute "svn update"
execute "popd"

# info "synchronizing files in ${FAI_CONF}/"
# execute "rsync -avzu -L --exclude='.svn' ${SVN_FAI_CONFIGDIR}/ ${FAI_CONFIGDIR}/"

for (( idx = 0 ; idx < ${#dst_array[@]} ; idx++ ))
do
    dir=${dst_array[$idx]}
    svn_dir=${src_array[$idx]}
    [ -z "$dir" ]     && print_error_and_exit "EMPTY dir variable"
    [ -z "$svn_dir" ] && print_error_and_exit "EMPTY svn_dir variable"
    info "synchronizing files from the SVN repository $svn_dir in $dir"
    really_continue
    RSYNC_NO_LINK=''
    [ "$dir" == "${FAI_ETC}" ] && RSYNC_NO_LINK='-L'
    execute "rsync -avz ${RSYNC_MODE} ${RSYNC_NO_LINK} --exclude '.svn*' $svn_dir/ $dir/"
done

# Update rights on the conf directory  bind directory
execute "chown -R ${FAI_FILE_OWNER}:${FAI_FILE_GROUP} ${FAI_CONFIGDIR}"
execute "chown -R ${FAI_FILE_OWNER}:${FAI_FILE_GROUP} ${FAI_ETC}"

