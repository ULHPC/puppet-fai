#!/bin/bash
################################################################################
# <%= scope.lookupvar('fai::params::nfsroot_hookdir') %>/patch-initrd 
# 
#       _   _ _____ ____  ____   ___   ___ _____   _   _             _    
#      | \ | |  ___/ ___||  _ \ / _ \ / _ \_   _| | | | | ___   ___ | | __
#      |  \| | |_  \___ \| |_) | | | | | | || |   | |_| |/ _ \ / _ \| |/ /
#      | |\  |  _|  ___) |  _ <| |_| | |_| || |   |  _  | (_) | (_) |   < 
#      |_| \_|_|   |____/|_| \_\\___/ \___/ |_|   |_| |_|\___/ \___/|_|\_\
#                                                                         
################################################################################
# Shell scripts to be sourced at the end of make-fai-nfsroot for additional
# configuration of the nfsroot - here the reconfiguration of the initrd to
# include a set of kernel modules (network card typically)  
################################################################################
#" /!\ DO NOT EDIT THIS FILE: it has been automatically generated by Puppet.
#      In particular, any further changes will be overwritten at the next 
#      puppet invocation
################################################################################

echo "*** Enter patch initrd hook ***"

<% if scope.lookupvar('fai::use_backports') == true -%>
$ROOTCMD apt-get install -t <%= scope.lookupvar('fai::debootstrap_suite') %>-backports firmware-bnx2
<% end -%>

<% if scope.lookupvar('fai::initramfs_modules') != [] -%>
echo "=> add the following modules to the initrd: <%= scope.lookupvar('fai::initramfs_modules').join(',') %>"
cat >> ${NFSROOT}/etc/initramfs-tools/modules <<EOF
# Custom modules added by the NFSROOK hook
<%     scope.lookupvar('fai::initramfs_modules').each do |modu| -%>
<%= modu %> 
<% end -%>
EOF

#TARGET_BASEVERSION=`$ROOTCMD dpkg -l | grep linux-base | awk '{print $3}' | cut -d "-" -f 1`
#TARGET_KERNEL_VERSION=`basename ${NFSROOT}/boot/initrd.img-${TARGET_BASEVERSION}* | sed "s/initrd\.img-//"`
TARGET_KERNEL_VERSION=`basename ${NFSROOT}/boot/initrd.img-* | sed "s/initrd\.img-//"`
echo "target kernel = ${TARGET_KERNEL_VERSION}"
INITRDFILE="/boot/initrd.img-${TARGET_KERNEL_VERSION}"

# echo "=> compiling last version of Broadcom's NetXtreme Ethernet controllers"
# # see http://www.broadcom.com/support/ethernet_nic/netxtreme_server.php
# LINUX_SRCDIR="/usr/src/linux-source-${TARGET_BASEVERSION}"

# TG3_SRCDIR="/etc/fai/nfsroot-hooks/tg3"

# if [ -f "${NFSROOT}/${LINUX_SRCDIR}.tar.bz2" ]; then 
#     echo "=> uncompress Linux kernel sources ${NFSROOT}/${LINUX_SRCDIR}.tar.bz2"
#     tar -C ${NFSROOT}/usr/src -xjf ${NFSROOT}/${LINUX_SRCDIR}.tar.bz2
#     $ROOTCMD ln -s ${LINUX_SRCDIR} /usr/src/linux

#     $ROOTCMD cp /boot/config-${TARGET_KERNEL_VERSION} /usr/src/linux/.config

#     $ROOTCMD make -C /usr/src/linux oldconfig
#     $ROOTCMD make -C /usr/src/linux prepare
#     $ROOTCMD make -C /usr/src/linux modules_prepare

#     #$ROOTCMD rmmod tg3
#     $ROOTCMD make -C ${TG3_SRCDIR} clean
#     echo "=> compiling tg3 kernel module"
#     $ROOTCMD make -C ${TG3_SRCDIR}
# else 
#     echo "/!\ WARNING: ${NFSROOT}/${LINUX_SRCDIR}.tar.bz2 not found"
# fi


if [ -f "${NFSROOT}/${INITRDFILE}" ]; then
    echo "=> removing ${NFSROOT}/${INITRDFILE}"
    rm -f ${NFSROOT}/${INITRDFILE}

    echo "=> updating initramfs for the nfsroot"
    $ROOTCMD update-initramfs -k ${TARGET_KERNEL_VERSION} -c

    echo "=> updating ${TFTPROOT}/initrd.img-*"
    cp ${NFSROOT}/boot/initrd.img-* ${TFTPROOT}/
else
    echo "/!\ WARNING: unable to find the file '${NFSROOT}/${INITRDFILE}'"
fi


# # copy files to patch initrd
# #cp /usr/local/etc/*patch $NFSROOT/usr/local/etc
# #cp /usr/local/etc/initramfs-tools_hook_network $NFSROOT/etc/initramfs-tools/hooks/network

# #$ROOTCMD update-initramfs -k all -t -u
# #cp -pv $NFSROOT/boot/vmlinu?-* $NFSROOT/boot/initrd.img-* $TFTPROOT

<% end -%>

# echo "Exit patch initrd hook"



